{"version":3,"file":"screentime.min.js","sources":["../src/screentime.js"],"sourcesContent":["class Field {\n    constructor(selector) {\n        this.selector = selector;\n        this.element = document.querySelector(selector);\n        this.updateMetrics();\n    }\n\n    updateMetrics() {\n        const rect = this.element.getBoundingClientRect();\n        this.top = rect.top + window.scrollY;\n        this.bottom = rect.bottom + window.scrollY;\n        this.height = rect.height;\n    }\n\n    isOnScreen(viewport, percentOnScreen) {\n        this.updateMetrics();\n        const threshold = this.height * (percentOnScreen / 100);\n        return (\n            this.bottom - threshold > viewport.top &&\n            this.top + threshold < viewport.bottom\n        );\n    }\n}\n\nexport default class ScreenTime {\n    constructor(options = {}) {\n        this.viewport = {\n            top: window.scrollY,\n            bottom: window.scrollY + window.innerHeight\n        }\n        this.options = {...ScreenTime.defaults, ...options};\n        this.field = new Field(this.options.field.selector);\n        this.timer = null;\n        this.log = {};\n        this.reportTimer = 0;\n        this.reportIntervalId = null;\n        this.inactivityCounter = 0;\n        this.inactivityTimer = 0;\n        this.lastReport = 0;\n        this.reportInterval = this.options.reportInterval * 1000;\n        document.addEventListener(\"visibilitychange\", this.handleVisibilityChange.bind(this));\n        window.addEventListener('scroll', this.updateViewport.bind(this));\n        window.addEventListener('resize', this.updateViewport.bind(this));\n        this.start();\n    }\n\n    updateViewport() {\n        this.viewport.top = window.scrollY;\n        this.viewport.bottom = this.viewport.top + window.innerHeight;\n    }\n\n    static get defaults() {\n        return {\n            fields: [],\n            percentOnScreen: 50,\n            reportInterval: 10,\n            googleAnalytics: false,\n            everySecondCallback: function () {\n            },\n            onInactivity: function () {\n            },\n            onStart: function () {\n            },\n            onReport: function () {\n            }\n        };\n    }\n\n    start() {\n        if (this.options.onStart) {\n            this.options.onStart();\n        }\n        this.clearTimers();\n        this.isActive = true;\n        this.timer = setInterval(() => {\n            this.checkFields();\n            this.inactivityTimer++;\n            this.reportTimer++;\n            if (this.inactivityTimer >= this.options.inactiveInterval) {\n                this.handleInactivity();\n            }\n            if (this.reportTimer >= this.options.reportInterval) {\n                this.report();\n            }\n        }, 1000);\n        this.addActivityListeners();\n    }\n\n    addActivityListeners() {\n        const events = ['click', 'scroll', 'mousemove', 'keypress', 'touchstart', 'touchmove', 'wheel'];\n        const inactivityEvents = ['beforeunload', 'unload', 'pagehide', 'blur'];\n        events.forEach(event => {\n            window.addEventListener(event, () => this.resetInactivityTimer());\n        });\n        inactivityEvents.forEach(event => {\n            window.addEventListener(event, () => this.handleInactivity());\n        });\n    }\n\n    resetInactivityTimer() {\n        this.inactivityTimer = 0;\n        if (!this.isActive) {\n            this.isActive = true;\n            this.start();\n        }\n    }\n\n    handleInactivity() {\n        if (this.options.onInactivity) {\n            this.options.onInactivity();\n        }\n        this.isActive = false;\n        this.report();\n        this.clearTimers();\n    }\n\n    clearTimers() {\n        clearInterval(this.timer);\n        this.timer = null;\n    }\n\n    checkFields() {\n        if (!this.isActive) {\n            return;\n        }\n        if (this.field.isOnScreen(this.viewport, this.options.percentOnScreen)) {\n            this.log[this.field.selector] = (this.log[this.field.selector] || 0) + 1;\n        }\n        if (this.options.everySecondCallback) {\n            this.options.everySecondCallback(this.log);\n        }\n    }\n\n    report() {\n        const shouldReport = Date.now() - this.lastReport >= 10;\n        if (!shouldReport) {\n            return;\n        }\n        const hasFields = Object.keys(this.log).length > 0;\n        if (hasFields && this.options.onReport) {\n            this.options.onReport(this.log);\n        }\n        this.reportTimer = 0;\n        this.lastReport = Date.now();\n    }\n\n    handleVisibilityChange() {\n        if (document.visibilityState === 'hidden') {\n            this.stop();\n            this.report();\n            return;\n        }\n        this.start();\n    }\n\n    stop() {\n        clearInterval(this.timer);\n        this.timer = null;\n    }\n}\n"],"names":["Field","constructor","selector","element","document","querySelector","updateMetrics","rect","this","getBoundingClientRect","top","window","scrollY","bottom","height","isOnScreen","viewport","percentOnScreen","threshold","ScreenTime","options","innerHeight","defaults","field","timer","log","reportTimer","reportIntervalId","inactivityCounter","inactivityTimer","lastReport","reportInterval","addEventListener","handleVisibilityChange","bind","updateViewport","start","fields","googleAnalytics","everySecondCallback","onInactivity","onStart","onReport","clearTimers","isActive","setInterval","checkFields","inactiveInterval","handleInactivity","report","addActivityListeners","forEach","event","resetInactivityTimer","clearInterval","Date","now","Object","keys","length","visibilityState","stop"],"mappings":"yJAAMA,MACFC,YAAYC,eACHA,SAAWA,cACXC,QAAUC,SAASC,cAAcH,eACjCI,gBAGTA,sBACUC,KAAOC,KAAKL,QAAQM,6BACrBC,IAAMH,KAAKG,IAAMC,OAAOC,aACxBC,OAASN,KAAKM,OAASF,OAAOC,aAC9BE,OAASP,KAAKO,OAGvBC,WAAWC,SAAUC,sBACZX,sBACCY,UAAYV,KAAKM,QAAUG,gBAAkB,YAE/CT,KAAKK,OAASK,UAAYF,SAASN,KACnCF,KAAKE,IAAMQ,UAAYF,SAASH,cAKvBM,WACjBlB,kBAAYmB,+DAAU,QACbJ,SAAW,CACZN,IAAKC,OAAOC,QACZC,OAAQF,OAAOC,QAAUD,OAAOU,kBAE/BD,QAAU,IAAID,WAAWG,YAAaF,cACtCG,MAAQ,IAAIvB,MAAMQ,KAAKY,QAAQG,MAAMrB,eACrCsB,MAAQ,UACRC,IAAM,QACNC,YAAc,OACdC,iBAAmB,UACnBC,kBAAoB,OACpBC,gBAAkB,OAClBC,WAAa,OACbC,eAA+C,IAA9BvB,KAAKY,QAAQW,eACnC3B,SAAS4B,iBAAiB,mBAAoBxB,KAAKyB,uBAAuBC,KAAK1B,OAC/EG,OAAOqB,iBAAiB,SAAUxB,KAAK2B,eAAeD,KAAK1B,OAC3DG,OAAOqB,iBAAiB,SAAUxB,KAAK2B,eAAeD,KAAK1B,YACtD4B,QAGTD,sBACSnB,SAASN,IAAMC,OAAOC,aACtBI,SAASH,OAASL,KAAKQ,SAASN,IAAMC,OAAOU,YAG3CC,4BACA,CACHe,OAAQ,GACRpB,gBAAiB,GACjBc,eAAgB,GAChBO,iBAAiB,EACjBC,oBAAqB,aAErBC,aAAc,aAEdC,QAAS,aAETC,SAAU,cAKlBN,QACQ5B,KAAKY,QAAQqB,cACRrB,QAAQqB,eAEZE,mBACAC,UAAW,OACXpB,MAAQqB,aAAY,UAChBC,mBACAjB,uBACAH,cACDlB,KAAKqB,iBAAmBrB,KAAKY,QAAQ2B,uBAChCC,mBAELxC,KAAKkB,aAAelB,KAAKY,QAAQW,qBAC5BkB,WAEV,UACEC,uBAGTA,uBACmB,CAAC,QAAS,SAAU,YAAa,WAAY,aAAc,YAAa,SAEhFC,SAAQC,QACXzC,OAAOqB,iBAAiBoB,OAAO,IAAM5C,KAAK6C,4BAFrB,CAAC,eAAgB,SAAU,WAAY,QAI/CF,SAAQC,QACrBzC,OAAOqB,iBAAiBoB,OAAO,IAAM5C,KAAKwC,wBAIlDK,4BACSxB,gBAAkB,EAClBrB,KAAKoC,gBACDA,UAAW,OACXR,SAIbY,mBACQxC,KAAKY,QAAQoB,mBACRpB,QAAQoB,oBAEZI,UAAW,OACXK,cACAN,cAGTA,cACIW,cAAc9C,KAAKgB,YACdA,MAAQ,KAGjBsB,cACStC,KAAKoC,WAGNpC,KAAKe,MAAMR,WAAWP,KAAKQ,SAAUR,KAAKY,QAAQH,wBAC7CQ,IAAIjB,KAAKe,MAAMrB,WAAaM,KAAKiB,IAAIjB,KAAKe,MAAMrB,WAAa,GAAK,GAEvEM,KAAKY,QAAQmB,0BACRnB,QAAQmB,oBAAoB/B,KAAKiB,MAI9CwB,cACyBM,KAAKC,MAAQhD,KAAKsB,YAAc,WAInC2B,OAAOC,KAAKlD,KAAKiB,KAAKkC,OAAS,GAChCnD,KAAKY,QAAQsB,eACrBtB,QAAQsB,SAASlC,KAAKiB,UAE1BC,YAAc,OACdI,WAAayB,KAAKC,MAG3BvB,4BACqC,WAA7B7B,SAASwD,4BACJC,iBACAZ,cAGJb,QAGTyB,OACIP,cAAc9C,KAAKgB,YACdA,MAAQ"}